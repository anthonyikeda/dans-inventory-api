openapi: 3.0.0
# Added by API Auto Mocking Plugin
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/anthonyikeda/inventory-api/1.0.0
  - description: Development server
    url: http://localhost:8066/inventory/v1

info:
  description: >
    This API holds information on all of Dan's products that he can seel at his cafe.
    It also ensures that prices are configured based on special events and inventory status (too many, price goes down).

    As standard, customers will only be able to access APIs specifically for listing the available items and browsing
    what is available for the day. Other APIs are used for maintaining the inventory when items are sold or updated.

    THis API is purely for managing the inventory. To actually utilise the inventory for UI purposes, you need to reference the inventory-search-api.
  version: "1.0.0"
  title: >
    Inventory API for Dan's Cafe
  contact:
    email: anthony.ikeda@gmail.com
    name: Anthony Ikeda
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: admins
    description: Secured Admin-only calls
  - name: developers
    description: Operations available to regular developers

paths:
  '/v1/product':
    post:
      description: Create a new product in the inventory
      operationId: createProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/ProductBody'
            examples:
              ProductBody:
                $ref: '#/components/examples/ProductBodyDrink'
              ProductSnack:
                $ref: '#/components/examples/ProductBodySnack'
      responses:
        '201':
          $ref: '#/components/responses/Product'
  '/v1/product/{id}':
    get:
      description: Retrieves a single product by it's unique id
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        '200':
          $ref: '#/components/responses/Product'
    put:
      description: Update a product excluding labels
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        $ref: '#/components/requestBodies/ProductBody'
      responses:
        203:
          $ref: '#/components/responses/Product'
    delete:
      description: Delete a product
      operationId: deleteProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
      responses:
        '203':
          description: accepted
  '/v1/product/{id}/label/{label}':
    patch:
      description: >
        Change a label
      operationId: updateProductLabel
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - name: label
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newLabel:
                  type: string
            example:
              newLabel: 'Low fat Milk'
      responses:
        '203':
          description: accepted


  '/v1/product/{id}/price':
    get:
      description: >
        Retrieves the price or prices of a product. If a `sale_date` is supplied then the price at that date is returned.
      parameters:
        - in: path
          required: true
          name: id
          schema:
            type: integer
        - in: query
          required: false
          name: sale_date
          schema:
            type: string
            format: 'date-time'
      responses:
        '200':
          description: >
            Found the prices
          content:
            application/json:
              schema:
                $ref: '#/components/responses/ProductPrices'
              examples:
                ProductPriceResponse:
                  $ref: '#/components/examples/ProductPrice'
                ProductAtDateResponse:
                  $ref: '#/components/examples/ProductPriceAtDate'
    delete:
      description: >
        Delete a price on a product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
        - in: path
          name: start_date
          required: true
          schema:
            type: string
            format: 'date-time'
      responses:
        '203':
          description: accepted
    post:
      description: >
        Add price to the named product
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        description: >
          The body that describes the new price and the dates it is active.
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/ProductPrice'
            examples:
              NewPriceBody:
                $ref: '#/components/examples/ProductPrice'
      responses:
        '201':
          description: Price was succesfully applied
          headers:
            location:
              schema:
                type: string

  '/v1/product/{id}/inventory':
    get:
      parameters:
        - name: id
          schema:
            type: integer
          in: path
          required: true
      description: |
        Return the inventory details for the given product
      responses:
        '200':
          description: Successful lookup
          content:
            'application/json':
              schema:
                $ref: '#/components/responses/ProductInventory'

components:
  schemas:
    Product:
      type: object
      properties:
        display_name:
          type: string
        description:
          type: string
        type:
          type: string
          enum: ['snack', 'drink']
        labels:
          type: array
          items:
            type: string
    Inventory:
      type: object
      properties:
        product_id:
          type: integer
        count:
          type: integer
        last_ordered:
          type: string
          format: 'date-time'
        request_time:
          type: string
          format: 'date-time'
    Price:
      type: object
      properties:
        description:
          type: string
        start_date:
          type: string
          format: 'date-time'
        end_date:
          type: string
          format: 'date-time'
        price:
          type: number
      required:
        - start_date
    ProductPrices:
      type: object
      properties:
        product_id:
          type: integer
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
  requestBodies:
    ProductBody:
      description: >
        the request body for a Product when creating
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
    ProductPrice:
      description: >
        Request to add a new price to a product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Price'
          examples:
            ProductPrice:
              $ref: '#/components/examples/ProductPrice'
  responses:
    Product:
      description: >
        Basic Product Response
      headers:
        location:
          description: Location of the Product
          schema:
            type: string
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
          examples:
            ProductDrinkResponse:
              $ref: '#/components/examples/ProductDrinkCreateResponse'
            ProductSnackResponse:
              $ref: '#/components/examples/ProductSnackCreateResponse'
    ProductInventory:
      description: >
        Describes the current inventory status of the given product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Inventory'
    ProductPrices:
      description: >
        Current prices of the request product
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductPrices'
  examples:
    ProductPrice:
      description: 'Example ProductPrice structure'
      summary: 'Example ProductPrice structure'
      value:
        prices:
          - start_date: '20-01-2020T10:00'
            price: 2.50
          - start_date: '01-02-2020T10:00'
            end_date: '05-02-2020T17:00'
            price: 1.00
    ProductPriceAtDate:
      description: A price of a product at a particular date
      summary: Price at a particular date
      value:
        prices:
          - start_date: '25-01-2020T10:00'
            price: 2.50
    ProductBodyDrink:
      description: 'An example of a product'
      summary: 'An example of a drink request'
      value:
        display_name: 'Flat white'
        description: 'Australian inspired coffee with low froth'
        type: 'drink'
        labels:
          - 'coffee'
          - 'drink'
          - 'low froth'
    ProductBodySnack:
      description: An example of a snack
      summary: 'An example of a snack request'
      value:
        display_name: 'Mixed Berry Scone'
        description: 'A heavy, wheaty breaded snack'
        type: 'snack'
        labels:
          - 'pastry'
          - 'snack'
    ProductDrinkCreateResponse:
      description: >
        The response from creating a product
      value:
        display_name:  'Cafe Latte'
        type: 'drink'
        description: 'Typical coffee that is very popular'
        labels:
          - 'coffee'
          - 'drink'
          - 'milk froth'
    ProductSnackCreateResponse:
      description: >
        The response from creating a new snack
      value:
        display_name: 'Mixed Berry Scone'
        type: 'snack'
        description: 'A heavy, wheaty breaded snack'
        labels:
          - 'pastry'
          - 'snack'
